// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeletePrefixListCommon = "DeletePrefixList"

// DeletePrefixListCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeletePrefixListCommon operation. The "output" return
// value will be populated with the DeletePrefixListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeletePrefixListCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeletePrefixListCommon Send returns without error.
//
// See DeletePrefixListCommon for more information on using the DeletePrefixListCommon
// API call, and error handling.
//
//    // Example sending a request using the DeletePrefixListCommonRequest method.
//    req, resp := client.DeletePrefixListCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeletePrefixListCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeletePrefixListCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeletePrefixListCommon API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation DeletePrefixListCommon for usage and error information.
func (c *VPC) DeletePrefixListCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeletePrefixListCommonRequest(input)
	return out, req.Send()
}

// DeletePrefixListCommonWithContext is the same as DeletePrefixListCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeletePrefixListCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeletePrefixListCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeletePrefixListCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeletePrefixList = "DeletePrefixList"

// DeletePrefixListRequest generates a "volcengine/request.Request" representing the
// client's request for the DeletePrefixList operation. The "output" return
// value will be populated with the DeletePrefixListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeletePrefixListCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeletePrefixListCommon Send returns without error.
//
// See DeletePrefixList for more information on using the DeletePrefixList
// API call, and error handling.
//
//    // Example sending a request using the DeletePrefixListRequest method.
//    req, resp := client.DeletePrefixListRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeletePrefixListRequest(input *DeletePrefixListInput) (req *request.Request, output *DeletePrefixListOutput) {
	op := &request.Operation{
		Name:       opDeletePrefixList,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeletePrefixListInput{}
	}

	output = &DeletePrefixListOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeletePrefixList API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation DeletePrefixList for usage and error information.
func (c *VPC) DeletePrefixList(input *DeletePrefixListInput) (*DeletePrefixListOutput, error) {
	req, out := c.DeletePrefixListRequest(input)
	return out, req.Send()
}

// DeletePrefixListWithContext is the same as DeletePrefixList with the addition of
// the ability to pass a context and additional request options.
//
// See DeletePrefixList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeletePrefixListWithContext(ctx volcengine.Context, input *DeletePrefixListInput, opts ...request.Option) (*DeletePrefixListOutput, error) {
	req, out := c.DeletePrefixListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeletePrefixListInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	DryRun *bool `type:"boolean"`

	// PrefixListId is a required field
	PrefixListId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeletePrefixListInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeletePrefixListInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeletePrefixListInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeletePrefixListInput"}
	if s.PrefixListId == nil {
		invalidParams.Add(request.NewErrParamRequired("PrefixListId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *DeletePrefixListInput) SetClientToken(v string) *DeletePrefixListInput {
	s.ClientToken = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *DeletePrefixListInput) SetDryRun(v bool) *DeletePrefixListInput {
	s.DryRun = &v
	return s
}

// SetPrefixListId sets the PrefixListId field's value.
func (s *DeletePrefixListInput) SetPrefixListId(v string) *DeletePrefixListInput {
	s.PrefixListId = &v
	return s
}

type DeletePrefixListOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeletePrefixListOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeletePrefixListOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeletePrefixListOutput) SetRequestId(v string) *DeletePrefixListOutput {
	s.RequestId = &v
	return s
}
